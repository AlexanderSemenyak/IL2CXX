@page "/"
@using DemoContentLoader
@using Demos
@implements IAsyncDisposable
@inject IJSRuntime JS

<PageTitle>Demos</PageTitle>

<h1>Demos@(pausing ? " (Pausing... Press Esc to unpause.)" : string.Empty)</h1>

<div tabindex="0" class="demo-container" @ref="container"
 @onkeydown="@(async e =>
 {
    preventDefaultKeydown = e.Code switch
    {
        "Tab" or "F1" or "F3" => true, _ => false
    };
    if (pausing) loop!.Input.End();
    loop!.Input.KeyDown(e);
    if (loop.DemoHarness!.controls.Exit.WasTriggered(loop.Input))
        await methods!.InvokeVoidAsync("pause", pausing ^= true);
    else if (loop.DemoHarness.controls.LockMouse.WasTriggered(loop.Input))
        await methods!.InvokeVoidAsync("lockPointer");
 })" @onkeydown:preventDefault="preventDefaultKeydown"
 @onkeyup="@(e => loop!.Input.KeyUp(e))" @onkeyup:preventDefault
 @onkeypress="@(e => loop!.Input.KeyPress(e))" @onkeypress:preventDefault
 @onmousedown="@(async e =>
 {
    await container.FocusAsync();
    loop!.Input.MouseDown(e);
 })" @onmousedown:preventDefault
 @onmouseup="@(e => loop!.Input.MouseUp(e))" @onmouseup:preventDefault
 @onmousemove="@(e => loop!.Input.MouseMove(e))" @onmousemove:preventDefault
 @onmousewheel="@(e => loop!.Input.MouseWheel(e))" @onmousewheel:preventDefault
 >
  <BECanvas Width="width" Height="height" @ref="canvas"></BECanvas>
</div>

@code {
    private int width;
    private int height;
    private ElementReference container;
    private BECanvasComponent? canvas;
    private WebGL2Context? context;
    private GameLoop? loop;
    private DotNetObjectReference<Index>? thisDNO;
    private IJSObjectReference? module;
    private IJSObjectReference? methods;
    private bool preventDefaultKeydown;
    private bool pausing;

    public async ValueTask DisposeAsync()
    {
        if (loop != null) await loop.DisposeAsync();
        thisDNO?.Dispose();
        if (methods != null) await methods.DisposeAsync();
        if (module != null) await module.DisposeAsync();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        context = await canvas.CreateWebGL2Async();
        loop = new(context);
        await loop.InitializeAsync();
        using (var stream = typeof(Index).Assembly.GetManifestResourceStream("BPDemosBW.Demos.Demos.contentarchive"))
        {
            loop.DemoHarness = new(loop, ContentArchive.Load(stream));
            await loop.DemoHarness.InitializeAsync();
        }
        thisDNO = DotNetObjectReference.Create(this);
        module = await JS.InvokeAsync<IJSObjectReference>("import", "./helpers.js");
        methods = await module.InvokeAsync<IJSObjectReference>("start", thisDNO, container);
        await container.FocusAsync();
    }
    [JSInvokable]
    public Task UpdateAsync(double elapsed) => loop!.UpdateAsync(elapsed / 1000.0);
    [JSInvokable]
    public async Task ResizeAsync(double width, double height)
    {
        this.width = (int)width;
        this.height = (int)height;
        await loop!.ResizeAsync(this.width, this.height);
        StateHasChanged();
    }
    [JSInvokable]
    public void PointerLockChange(bool locked) => loop!.Input.MouseLocked = locked;
    [JSInvokable]
    public void PointerMove(int dx, int dy) => loop!.Input.PointerMove(dx, dy);
}
